import{_ as o,o as l,c as t,V as e}from"./chunks/framework.3745025a.js";const P=JSON.parse('{"title":"计算机网络","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/computerNet.md","filePath":"javascript/computerNet.md"}'),a={name:"javascript/computerNet.md"},i=e('<h1 id="计算机网络" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络" aria-label="Permalink to &quot;计算机网络&quot;">​</a></h1><h2 id="网络协议" tabindex="-1">网络协议 <a class="header-anchor" href="#网络协议" aria-label="Permalink to &quot;网络协议&quot;">​</a></h2><blockquote><p>网络协议是一种规定了计算机网络中<code>数据传输</code>和<code>通信</code>的<strong>规则</strong>和约定的<strong>规范</strong>。<br> 作用是确保数据能够在网络中<code>正确</code>、<code>高效</code>地<code>传输</code>和<code>交换</code>。</p></blockquote><h2 id="传输协议" tabindex="-1">传输协议 <a class="header-anchor" href="#传输协议" aria-label="Permalink to &quot;传输协议&quot;">​</a></h2><ul><li>TCP（传输控制协议）：提供可靠的、面向连接的数据传输，确保数据的完整性和顺序。</li><li>UDP（用户数据报协议）：无连接的传输协议，不保证数据的可靠性和顺序。</li></ul><h3 id="tcp的三次握手与四次挥手" tabindex="-1">TCP的三次握手与四次挥手 <a class="header-anchor" href="#tcp的三次握手与四次挥手" aria-label="Permalink to &quot;TCP的三次握手与四次挥手&quot;">​</a></h3><blockquote><p>三次握手: TCP<strong>建立</strong>了可靠的连接，确保数据的可靠传输。 四次挥手: TCP安全地<strong>关闭</strong>连接，<strong>释放资源</strong>。</p></blockquote><ol><li>三次握手（Three-way Handshake）： <ul><li>第一步：客户端向服务器发送一个SYN（<strong>同步</strong>）包，其中包含自己的初始序列号。</li><li>第二步：服务器收到SYN包后，回复一个SYN+ACK（<strong>同步+确认</strong>）包，其中包含<strong>自己的初始序列号</strong>和<strong>确认号</strong>（客户端的初始序列号+1）。</li><li>第三步：客户端收到服务器的SYN+ACK包后，回复一个ACK（确认）包，其中包含<strong>确认号</strong>（服务器的初始序列号+1）。</li></ul></li></ol><p>总结： 这样，<strong>双方</strong>都确认了<code>对方的初始序列号</code>，并建立了可靠的<strong>双向通信</strong>。</p><ol start="2"><li>四次挥手（Four-way Handshake）： <ul><li>第一步：当客户端想要<strong>关闭连接</strong>时，发送一个FIN（<strong>结束</strong>）包，<code>表示不再发送数据</code>。</li><li>第二步：服务器收到FIN包后，回复一个ACK包，<code>确认收到</code>了客户端的<code>关闭请求</code>。</li><li>第三步：服务器完成自己的数据发送后，发送一个FIN（<strong>结束</strong>）包，表示<code>自己也准备</code>关闭连接。</li><li>第四步：客户端收到服务器的FIN包后，回复一个ACK包，<code>确认收到</code>了服务器的<code>关闭请求</code>。</li></ul></li></ol><p>这样，<strong>双方</strong>都确认了<code>对方的关闭请求</code>，并完成了连接的关闭。</p><h2 id="网络层协议" tabindex="-1">网络层协议 <a class="header-anchor" href="#网络层协议" aria-label="Permalink to &quot;网络层协议&quot;">​</a></h2><ul><li>IP（互联网协议）：负责将数据包从<strong>源主机</strong>发送到<strong>目标主机</strong>，并通过路由器进行转发。</li></ul><h2 id="应用层协议" tabindex="-1">应用层协议 <a class="header-anchor" href="#应用层协议" aria-label="Permalink to &quot;应用层协议&quot;">​</a></h2><ul><li>HTTP（超文本传输协议）：定义了Web应用程序之间的<strong>通信规则</strong>。</li><li>HTTPS（安全超文本传输协议）：在HTTP的基础上增加了<strong>加密</strong>和<strong>身份验证机制</strong>，用于安全地传输网页和敏感数据。</li><li>FTP（文件传输协议）：用于在网络上进行文件传输。</li><li>DNS（域名系统）：用于将<code>域名</code>转换为对应的<code>IP地址</code>。</li><li>SMTP（简单邮件传输协议）：用于电子邮件的传输。</li><li>SSH（安全外壳协议）：用于在网络上安全地远程登录和执行命令。</li></ul><h3 id="数据链路层协议" tabindex="-1">数据链路层协议 <a class="header-anchor" href="#数据链路层协议" aria-label="Permalink to &quot;数据链路层协议&quot;">​</a></h3><ul><li>以太网协议（Ethernet）：定义了数据在物理链路上的传输方式。</li><li>Wi-Fi协议：无线网络的数据链路层协议。</li></ul><h3 id="http与tcp的关系" tabindex="-1">HTTP与TCP的关系 <a class="header-anchor" href="#http与tcp的关系" aria-label="Permalink to &quot;HTTP与TCP的关系&quot;">​</a></h3><blockquote><p>二者共同协作，实现了Web页面的请求和响应。</p></blockquote><ul><li>TCP协议： <ul><li>提供了<strong>可靠</strong>的数据传输</li><li>(例如三次握手，四次挥手)</li></ul></li><li>HTTP协议： <ul><li>定义了应用程序之间的<strong>通信规则</strong></li><li>(例如规定请求头，请求体，响应体，状态码)，</li></ul></li></ul><h3 id="http与https的区别" tabindex="-1">HTTP与HTTPS的区别 <a class="header-anchor" href="#http与https的区别" aria-label="Permalink to &quot;HTTP与HTTPS的区别&quot;">​</a></h3><blockquote><p>它们在数据传输的<code>安全性</code>和<code>加密方式</code>上有所区别。<br> 倾向于使用HTTPS, 安全且有利于SEO优化。 HTTP一般用于内网。</p></blockquote><ul><li>安全性： <ul><li>HTTP: 明文传输协议，不加密，容易被解析和篡改。</li><li>HTTPS: 基于HTTP, 通过SSL/TSL协议，对数据加密和身份验证。</li></ul></li><li>端口号： <ul><li>HTTP: 默认80端口</li><li>HTTPS: 默认443端口</li></ul></li><li>证书： <ul><li>HTTP: 不需要证书</li><li>HTTPS: 需要使用SSL/TLS证书，用于验证服务器的身份和加密通信。</li></ul></li></ul>',23),r=[i];function n(s,c,d,u,h,T){return l(),t("div",null,r)}const p=o(a,[["render",n]]);export{P as __pageData,p as default};
