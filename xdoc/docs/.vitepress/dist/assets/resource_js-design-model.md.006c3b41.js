import{_ as s,o as n,c as a,V as l}from"./chunks/framework.3745025a.js";const A=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"resource/js-design-model.md","filePath":"resource/js-design-model.md"}'),p={name:"resource/js-design-model.md"},o=l(`<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><blockquote><p>本期主要学习5个<code>经典</code>的设计模式，分别是<code>单例模式</code>，<code>观察者模式</code>，<code>适配器模式</code>，<code>策略模式</code>和<code>装饰器模式</code>。<br> 以及学习<code>观察者模式</code> 和<code>发布-订阅者模式</code>在Vue中的应用。</p></blockquote><h2 id="单例模式" tabindex="-1">单例模式 <a class="header-anchor" href="#单例模式" aria-label="Permalink to &quot;单例模式&quot;">​</a></h2><blockquote><p>创建型模式，提供了一种<code>创建对象</code>的最佳方式。<br> 指一个类永远只有<code>一个活跃的实例</code>，确保只有单个对象被创建。<br> 本质是初始化时，判断是<code>否有</code>某个实例属性(当前实例对象<code>this</code>)，<br> 有则<code>永远返回</code>这个实例对象，没有就添加到属性上。<br> 可以减少内存的占用，常常用于管理<code>全局状态和数据</code></p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Logger</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Logger</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;font-style:italic;">// 如果有实例了，返回这个实例给新对象。</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">Logger</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> log1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Logger</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> log2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Logger</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(log1 </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> log2)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;">log1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//111</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>例如: <code>Vuex</code>和<code>Redux</code>就是基于<code>Flux</code>, 采用<code>全局单例模式</code>.<br> 很多第三方库，例如<code>lodash</code>,<code>jquery</code>等等，也是一样，<code>多次引用</code>只会使用<code>同一个对象</code>。</p></blockquote><h2 id="观察者模式" tabindex="-1">观察者模式 <a class="header-anchor" href="#观察者模式" aria-label="Permalink to &quot;观察者模式&quot;">​</a></h2><blockquote><p>定义了对象间的<code>一对多</code>的<code>依赖</code>关系，<br> 当一个对象发生改变时，依赖于它的对象会立即得到通知并自动更新。 其中，<code>一</code>就是<code>被观察者</code>，负责通知<code>各个观察者</code>数据更新了。<br><code>被观察者</code>将保存所有依赖于它的<code>观察者们</code>，以便于通知。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个被观察者类 -- Subject 类似于广播站</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Subject</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">observers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;font-style:italic;">// 定义一个属性，数组， 用于保存依赖于它的观察者们。</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 定义对应的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">addObserver</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">removeObserver</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexof</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">notifyObserver</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;font-style:italic;">// 通知每一个观察者，要更新了</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;font-style:italic;">// 遍历执行观察者的更新方法。</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updated</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个观察者类</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Observer</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 自己的更新方法</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">updated</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> subject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Subject</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> observer1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Observer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> observer2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Observer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 添加依赖关系  ---  多个观察者依赖于一个被观察者</span></span>
<span class="line"><span style="color:#A6ACCD;">subject</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addObserver</span><span style="color:#A6ACCD;">(observer1)</span></span>
<span class="line"><span style="color:#A6ACCD;">subject</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addObserver</span><span style="color:#A6ACCD;">(observer2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 通知所有观察者，消息变了</span></span>
<span class="line"><span style="color:#A6ACCD;">subject</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notifyObserver</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">要更新了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 要更新了 x2  打印两次</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="适配器模式" tabindex="-1">适配器模式 <a class="header-anchor" href="#适配器模式" aria-label="Permalink to &quot;适配器模式&quot;">​</a></h2><blockquote><p>开发了新的接口以后，为了<code>兼容旧的接口</code>，可以使用适配器模式。<br> 本质是将<code>旧接口的实例化对象</code>，作为<code>新接口的一个属性</code>，<br> 这样就可以调用该属性，使用旧接口方法。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OldApp</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">doingsomethingOld</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">旧接口中做旧的事情</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NewApp</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">oldInstance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">OldApp</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">doingsomethingNew</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">新接口中做新的事情</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">oldInstance</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doingsomethingOld</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newapp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NewApp</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">newapp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doingsomethingNew</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//调用的新接口，但是可以借助属性(继承对象)，间接调用旧接口中的方法。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="策略模式" tabindex="-1">策略模式 <a class="header-anchor" href="#策略模式" aria-label="Permalink to &quot;策略模式&quot;">​</a></h2><blockquote><p>本质是将多个策略类的实例，放置到一个控制类中的属性上，<br> 运行控制类的同一个方法时，通过控制类的设置方法切换策略类实例，<br> 灵活的切换策略类，进而触发不同策略类的同名方法。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 策略类A</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StrategyA</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">sayHello</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">StrategyA...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 策略类B</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StrategyB</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">sayHello</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">StrategyB...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 控制类，外界使用</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Consroller</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 构造函数上，传入一个实例对象</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 将其他策略纳入，作为一个属性使用。</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">strategy</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">strategy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">strategy</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 一个切换策略的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">setStrategy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">strategy</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">strategy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">strategy</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 一个使用策略类中方法的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">sayHello</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">strategy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayHello</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> strategya </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StrategyA</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> strategyb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StrategyB</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> consroller </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Consroller</span><span style="color:#A6ACCD;">(strategya)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 默认是策略a</span></span>
<span class="line"><span style="color:#A6ACCD;">consroller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayHello</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//StrategyA...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 切换策略类</span></span>
<span class="line"><span style="color:#A6ACCD;">consroller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setStrategy</span><span style="color:#A6ACCD;">(strategyb)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 再次调用时，因为切换了属性对应的实例对象，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 就调用策略b的方法了。</span></span>
<span class="line"><span style="color:#A6ACCD;">consroller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayHello</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//StrategyB...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="装饰器模式" tabindex="-1">装饰器模式 <a class="header-anchor" href="#装饰器模式" aria-label="Permalink to &quot;装饰器模式&quot;">​</a></h2><blockquote><p>通过将<code>原始类</code>的<code>实例化对象</code>纳入其中，作为<code>装饰器类</code>的<code>属性</code>。<br> 通过调用<code>装饰器实例对象</code>的方法，间接调用<code>原始类方法</code>。<br> 用于动态扩展<code>原始类</code>中的方法，且<code>不与</code>原始类有任何<code>继承关系</code>，不修改原始类。<br> 适配器模式也可以扩展，但是适配器模式是<code>事后补救</code>，且<code>有继承</code>关系。<br> 例外：装饰器模式是通过调用<code>同名方法</code>，触发原始类<code>同名方法</code>。<br> 而适配器模式是通过调用<code>新方法</code>,触发旧类的<code>旧方法</code>。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Origin</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">sayHello</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Origin...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Decorator</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 注意这里与适配器模式的区别</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		constructor(){</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">			this.oldInstance = new OldApp();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	*/</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">origin</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">origin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">origin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 注意这里一般是同名，与适配器有区别</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">sayHello</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">origin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayHello</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Decorator...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> origin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Origin</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> decorator </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Decorator</span><span style="color:#A6ACCD;">(origin)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">decorator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayHello</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;Origin...&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &#39;Decorator...&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="简要总结" tabindex="-1">简要总结 <a class="header-anchor" href="#简要总结" aria-label="Permalink to &quot;简要总结&quot;">​</a></h2><ul><li>单例模式 概念: 永远只返回一个实例对象 实现思路：</li></ul><ol><li>初始化时，将第一个实例对象作为一个属性(例如instance)。</li><li>判断instance是否有值，有值就返回这个值作为new的对象。 作用：单向数据流，减少空间占用，管理全局状态和数据，Vuex,Redux, jQuery 等库常见。</li></ol><ul><li>观察者模式 概念: 一个<code>一对多</code>的依赖关系，设计一个<code>被观察者类</code>，<br> 将所有依赖对象纳入数组中，使用一个属性保存起来。<br><code>被观察者类</code>中，可以便捷的<code>通知</code>所有依赖(观察者)类。 实现思路：</li></ul><ol><li>初始化时，定义一个属性(例如deps)，作为保存依赖的数组。</li><li>定义添加/删除依赖方法，接收传入<code>依赖实例</code>，将依赖添加/删除进deps数组。</li><li>有更新时，定义通知依赖方法，遍历通知deps所有依赖。 作用：Vue中的Observer类和Watcher类的处理。</li></ol><ul><li>适配器模式 概念：设计一个<code>兼容旧接口</code>的新接口，调用新接口方法时，同时触发旧接口方法。</li></ul><ol><li>初始化时，定义一个属性(例如oldInstance)，保存<code>旧接口的实例化对象</code>，本质是<code>new</code>继承。</li><li>定义一个新方法，新方法内调用oldInstance的旧接口方法。 作用：当需要设计新接口时，旧接口不想被移除，采用兼容模式补救。</li></ol><ul><li>策略模式 概念：设计一个控制类，以及切换策略的方法。灵活切换策略类。</li></ul><ol><li>初始化时，接收一个默认的<code>策略类实例</code>作为一个属性(例如strategy)</li><li>定义<code>设置策略类</code>的方法，当传入<code>新的策略类实例</code>, 更换属性值。</li><li>定义一个方法，触发多个策略类<code>同名方法</code>中的某一个 作用：类似于开关，或者委托的思想，一个控制类灵活切换，多个策略类中的<code>同名方法</code>。</li></ol><ul><li>装饰器模式 概念：设计一个装饰器类，动态扩展某个<code>实例对象</code>的属性和方法。<br> VS适配器：适配器有继承，内部保存new旧接口，初始化<code>不接收自定义实例</code>，是为兼容而设计。<br> VS装饰器：装饰器不含继承关系，是为动态扩展而设计。初始化<code>接收自定义实例</code>。</li></ul><ol><li>初始化时，定义一个属性(例如instance), 接收并保存一个<code>自定义实例化对象</code>。</li><li>定义一个方法，内部触发instance的同名方法，</li><li>接着方法内部，继续添加instance的别的方法或属性，动态扩展。</li></ol><h2 id="观察者模式与发布订阅的区别" tabindex="-1">观察者模式与发布订阅的区别 <a class="header-anchor" href="#观察者模式与发布订阅的区别" aria-label="Permalink to &quot;观察者模式与发布订阅的区别&quot;">​</a></h2><p>观察者模式：</p><ul><li>主要关注<code>一对多的关系</code>， <ul><li>即一个对象（主题/被观察者）维护一个或多个依赖对象（观察者）。</li></ul></li><li>当主题对象状态发生变化时， <ul><li>它会通知所有观察者对象，观察者对象会自动更新。</li></ul></li><li>观察者对象一般不知道其他观察者的存在，它们只与主题对象进行交互。</li><li>观察者模式提供了一种<code>松耦合</code>的方式来实现<code>对象间的交互和通信</code>。</li><li>例子：一个新闻订阅系统， <ul><li>用户可以订阅不同的新闻频道，当有新的新闻发布时，订阅该频道的用户会收到通知并更新。</li></ul></li></ul><p>发布-订阅模式：</p><ul><li>通过一个消息中心（或称为事件总线）来实现 <ul><li>发布（发布者/发送者）和订阅（订阅者/接收者）之间的解耦，</li><li>发布者和订阅者不直接相互通信，而是通过<code>消息中心</code>进行消息传递。</li></ul></li><li>发布者将消息发布到消息中心，订阅者通过订阅感兴趣的消息类型来接收消息。 <ul><li>当新的消息发布到消息中心时，订阅了相应消息的订阅者会收到这个消息。</li></ul></li><li>发布-订阅模式可以用于解耦复杂的系统组件，让它们彼此独立、灵活地进行通信和交互。</li><li>例子：一个购物网站提供了不同类型的促销活动， <ul><li>用户可以订阅感兴趣的促销活动，当有新的促销活动发布时，订阅了该活动的用户会收到通知。</li></ul></li></ul><p>关键区别：</p><ul><li>交互联系： <ul><li>观察者模式中，观察者<code>直接订阅主题对象</code>，主题对象直接通知观察者；</li><li>而发布-订阅模式中，发布者和订阅者之间<code>不直接通信</code>，而是通过消息中心进行交互。</li></ul></li><li>适用场景： <ul><li>观察者模式更加<code>简单直接</code>，适用于一对多的场景；</li><li>而发布-订阅模式可以实现<code>更松散的耦合</code>，适用于更复杂的系统组件交互。</li></ul></li><li>通知的同步异步: <ul><li>观察者模式的通知是同步的， <ul><li>即主题对象直接调用观察者对象的方法；</li></ul></li><li>而发布-订阅模式的通知是异步的， <ul><li>发布者将消息发布到消息中心，订阅者从消息中心接收消息。</li></ul></li></ul></li></ul><p>总结：</p><ul><li>观察者模式注重对象之间的依赖关系，</li><li>而发布-订阅模式则以消息中心作为中介实现解耦，适用于更复杂、灵活的系统架构。</li><li>根据具体需求选择适合的模式。</li></ul><h2 id="vue中的应用" tabindex="-1">Vue中的应用 <a class="header-anchor" href="#vue中的应用" aria-label="Permalink to &quot;Vue中的应用&quot;">​</a></h2><h3 id="观察者模式-1" tabindex="-1">观察者模式 <a class="header-anchor" href="#观察者模式-1" aria-label="Permalink to &quot;观察者模式&quot;">​</a></h3><blockquote><p>观察者模式机制大大简化了Vue中的<code>状态管理</code>和<code>数据驱动视图</code>的过程。</p></blockquote><ol><li><strong>Vue的响应式系统</strong>:</li></ol><ul><li>通过使用<code>Vue.observable</code>或<code>data</code>选项定义的数据，</li><li>会被转换成可观察的对象，并建立起观察者和依赖之间的关系。</li><li>Vue通过一个称为<code>依赖收集</code>的过程，来跟踪每个可观察对象的依赖关系。</li><li>当数据发生改变时，触发相应的依赖更新过程。</li><li>相关的观察者会被通知，并进行更新。</li></ul><p>具体细节:</p><ul><li>当将数据传递给Vue实例时，Vue会遍历这些数据的属性，</li><li>并在每个属性上使用<code>Object.defineProperty</code>来定义getter和setter。</li><li>在getter中，Vue会收集当前依赖的观察者，并将其添加到依赖列表中。</li><li>当数据发生改变时，setter会通知依赖列表中的观察者进行更新。</li></ul><h3 id="发布-订阅者模式" tabindex="-1">发布-订阅者模式 <a class="header-anchor" href="#发布-订阅者模式" aria-label="Permalink to &quot;发布-订阅者模式&quot;">​</a></h3><blockquote><p>发布-订阅者模式, 允许组件之间进行<code>松耦合的通信</code>和<code>状态共享</code>。<br> 一些特定的场景下，Vue 也使用了发布-订阅者模式。</p></blockquote><ol><li><strong>Vue 事件系统</strong>：</li></ol><ul><li>Vue 提供了一个全局的事件系统，允许组件之间进行通信。</li><li>组件可以使用 <code>$emit</code> 方法触发一个自定义事件，</li><li>其他组件通过 <code>$on</code> 方法来订阅该事件并接收通知。</li><li>这种机制和<code>发布-订阅者模式</code>类似。</li></ul><ol start="2"><li><strong>VueX State Management</strong>：</li></ol><ul><li>VueX 是一个用于状态管理的库，它提供了一个全局的数据仓库，</li><li>组件可以通过 <code>store</code> 对象访问和修改数据。</li><li>当一个组件修改了 <code>store</code> 中的数据，</li><li>其他组件可以通过订阅 <code>store</code> 中的相关数据来获取变化的通知。</li><li>这种机制也符合发布-订阅者模式的思想。</li></ul><ol start="3"><li><strong>Vue Router</strong>：</li></ol><ul><li>Vue Router 是 Vue.js 官方的路由管理器，</li><li>用于实现单页应用的路由功能。</li><li>当路由发生变化时，Vue Router 使用发布-订阅者模式</li><li>来通知相关的组件进行相应的路由切换和更新。</li></ul><ol start="4"><li><strong>Vue 的自定义事件和钩子函数</strong>：</li></ol><ul><li>可以使用自定义事件和生命周期钩子函数，</li><li>来实现父子组件之间的通信和组件生命周期的控制。</li><li>这些事件和钩子函数的触发和订阅机制, 也符合发布-订阅者模式。</li></ul>`,55),e=[o];function c(r,t,i,y,F,D){return n(),a("div",null,e)}const C=s(p,[["render",c]]);export{A as __pageData,C as default};
