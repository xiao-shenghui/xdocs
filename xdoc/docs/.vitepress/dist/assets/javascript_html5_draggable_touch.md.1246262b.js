import{_ as a,o as e,c as l,V as s}from"./chunks/framework.3745025a.js";const g=JSON.parse('{"title":"draggable和touch属性","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/html5/draggable&touch.md","filePath":"javascript/html5/draggable&touch.md"}'),t={name:"javascript/html5/draggable&touch.md"},n=s(`<h1 id="draggable和touch属性" tabindex="-1">draggable和touch属性 <a class="header-anchor" href="#draggable和touch属性" aria-label="Permalink to &quot;draggable和touch属性&quot;">​</a></h1><h2 id="draggable" tabindex="-1">draggable <a class="header-anchor" href="#draggable" aria-label="Permalink to &quot;draggable&quot;">​</a></h2><blockquote><p>HTML5新增的属性，用于拖拽<br> 要开启拖拽，必须给DOM节点的<code>draggable</code> 赋值为<code>true</code>;</p></blockquote><ul><li>拖拽的事件顺序：</li></ul><ol><li>dragstart: 源节点即将被拖动前触发一次。</li><li>drag: 源节点被拖动过程中反复触发。</li><li>dragenter: 源节点进入目标对象范围内时触发，一般要<code>pereventDefault</code>阻止默认拒绝的拖拽。</li><li>dragover: 源节点在目标对象范围内移动时触发, 一般要<code>pereventDefault</code>阻止默认拒绝的拖拽。</li><li>dragleave: 源节点离开目标对象范围时触发。</li><li>drop: 源节点在目标对象范围内被释放时触发。</li><li>dragend: 源节点拖动结束时触发。</li></ol><ul><li><p>触发对象和事件： |触发对象|事件名称|对应的拖拽时顺序| |---|---|---| |源对象|dragstart|1| ||drag|2| ||dragend|7| |目标对象|dragenter|3| ||dragover|4| ||dragleave|5| ||drop|6|</p></li><li><p>拖拽排序</p></li></ul><blockquote><p>由于拖动是实时的，所以没有使用drop而是使用了dragenter触发排序。<br> 在拖放的过程中涉及到两种元素，一种是被拖拽元素（源对象）。<br> 一种是放置区元素（目标对象），不同的对象有不同的拖放事件。</p></blockquote><h2 id="拖拽相关库" tabindex="-1">拖拽相关库 <a class="header-anchor" href="#拖拽相关库" aria-label="Permalink to &quot;拖拽相关库&quot;">​</a></h2><h3 id="vue-draggable" tabindex="-1">vue-draggable <a class="header-anchor" href="#vue-draggable" aria-label="Permalink to &quot;vue-draggable&quot;">​</a></h3><blockquote><p>基于Sortable.js的Vue拖放组件<br> 用于vue2: vue-draggable<br> 用于vue3: vue.draggable.next,</p></blockquote><h2 id="touch事件" tabindex="-1">touch事件 <a class="header-anchor" href="#touch事件" aria-label="Permalink to &quot;touch事件&quot;">​</a></h2><blockquote><p>touch事件是为了兼容移动设备的触摸而设计的。</p></blockquote><ul><li>touch事件的顺序</li></ul><ol><li>touchstart: 节点刚被触摸时，触发一次</li><li>touchmove: 节点被触摸后拖动时，不断触发</li><li>touchend: 节点被触摸结束后，触发一次</li></ol><ul><li><p>触摸时，e事件相关的属性</p><ul><li>e.touches: 当前跟踪触摸操作的Touch对象的数组</li><li>e.targetTouches: 特定事件目标的Touch对象的数组</li><li>e.changeTouches: 自上次触摸以来，发生改变的Touch对象的数组。</li></ul></li><li><p>每个touch对象包含如下属性</p><ul><li>clientX：触摸目标在视口中的x坐标。</li><li>clientY：触摸目标在视口中的y坐标。</li><li>pageX：触摸目标在页面中的x坐标。</li><li>pageY：触摸目标在页面中的y坐标。</li><li>target：触摸的DOM节点目标。</li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">e.touches</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">TouchList</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	0: Touch {identifier: 0, target: h1, screenX: 371, screenY: 256, clientX: 167.25332641601562, …}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	length:1 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	[[Prototype]]: TouchList</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//如果只有1个触摸节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">e.target === e.touches[0].target</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,16),r=[n];function o(i,c,p,u,d,h){return e(),l("div",null,r)}const m=a(t,[["render",o]]);export{g as __pageData,m as default};
