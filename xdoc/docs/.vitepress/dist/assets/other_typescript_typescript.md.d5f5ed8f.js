import{_ as a,o as e,c as s,V as l}from"./chunks/framework.b1ba171e.js";const b=JSON.parse('{"title":"typescript 入门到精通","description":"","frontmatter":{},"headers":[],"relativePath":"other/typescript/typescript.md","filePath":"other/typescript/typescript.md"}'),t={name:"other/typescript/typescript.md"},n=l(`<h1 id="typescript-入门到精通" tabindex="-1">typescript 入门到精通 <a class="header-anchor" href="#typescript-入门到精通" aria-label="Permalink to &quot;typescript 入门到精通&quot;">​</a></h1><blockquote><p><a href="https://blog.csdn.net/weixin_46185369/article/details/121512287" target="_blank" rel="noreferrer">原文链接</a></p></blockquote><h2 id="typescript-是什么" tabindex="-1">TypeScript 是什么 <a class="header-anchor" href="#typescript-是什么" aria-label="Permalink to &quot;TypeScript 是什么&quot;">​</a></h2><ol><li>TypeScript 简称：TS，是 JavaScript 的超集。简单来说就是：JS 有的 TS 都有。JS写的代码在TS的环境下都能跑。</li><li>在 JS 基础之上，为 JS 添加了类型支持。TypeScript = Type + JavaScript</li><li>TypeScript 是微软开发的开源编程语言，可以在任何运行 JavaScript 的地方运行</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// TypeScript  代码有明确的数据类型</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// JavaScript  代码没有明确的类型</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> age2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="为什么要为-js-添加类型支持" tabindex="-1">为什么要为 JS 添加类型支持? <a class="header-anchor" href="#为什么要为-js-添加类型支持" aria-label="Permalink to &quot;为什么要为 JS 添加类型支持?&quot;">​</a></h2><h3 id="js的缺陷" tabindex="-1">JS的缺陷 <a class="header-anchor" href="#js的缺陷" aria-label="Permalink to &quot;JS的缺陷&quot;">​</a></h3><ol><li>JS 的类型系统是弱类型的，没有类型的概念</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> ar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 这里是数值</span></span>
<span class="line"><span style="color:#A6ACCD;">ar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []  </span><span style="color:#676E95;font-style:italic;">// 偷偷的改成了数组类型</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 这里会报类型错误</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>没有类型校验，导致了在使用 JS 进行项目开发时，会经常遇到类型错误的问题，增加了找 Bug、改 Bug 的时间，严重影响开发效率<br> 2. JavaScript 属于动态类型的编程语言,<br> 边解释边执行，错误只能在运行阶段才能发现。</p><h3 id="ts属于静态类型的编程语言" tabindex="-1">TS属于静态类型的编程语言 <a class="header-anchor" href="#ts属于静态类型的编程语言" aria-label="Permalink to &quot;TS属于静态类型的编程语言&quot;">​</a></h3><ol><li>它要先编译，再执行。不能直接执行，需要编译成js才能执行</li><li>它会在编译期间做类型检查，从而提前发现错误。配合 VSCode 等开发工具，TS 可以提前到在编写代码的同时就发现代码中的类型错误，减少找 Bug、改 Bug 时间</li></ol><h3 id="对比" tabindex="-1">对比： <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比：&quot;">​</a></h3><ul><li>使用 JS： <ol><li>在 VSCode 里面写代码</li><li>在浏览器中运行代码 --&gt; 运行时，才会发现错误【晚】</li></ol></li><li>使用 TS： <ol><li>在 VSCode 里面写代码 --&gt; 写代码的同时，就会发现错误【早】</li><li>在浏览器中运行代码</li></ol></li></ul><h3 id="生态" tabindex="-1">生态 <a class="header-anchor" href="#生态" aria-label="Permalink to &quot;生态&quot;">​</a></h3><p>Vue 3 源码使用 TS 重写、Angular 默认支持 TS、React 与 TS 完美配合，TypeScript 已成为大中型前端 项目的首选编程语言<br> 目前，前端最新的开发技术栈：</p><ol><li>React： TS + Hooks</li><li>Vue： TS + Vue3 (注意： Vue2 对 TS 的支持不好~)</li></ol><h2 id="typescript-初体验" tabindex="-1">TypeScript 初体验 <a class="header-anchor" href="#typescript-初体验" aria-label="Permalink to &quot;TypeScript 初体验&quot;">​</a></h2><h3 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h3><p>安装可以把TS编译成JS的工具，搭建一个可以运行TS的环境</p><h3 id="全局安装编译-ts-的工具包" tabindex="-1">全局安装编译 TS 的工具包 <a class="header-anchor" href="#全局安装编译-ts-的工具包" aria-label="Permalink to &quot;全局安装编译 TS 的工具包&quot;">​</a></h3><p>安装包：<code>npm i -g typescript</code></p><ul><li>typescript 包：用来编译 TS 代码的包，提供了 tsc 命令，实现了 TS -&gt; JS 的转化</li><li>验证是否安装成功：tsc –v (查看 typescript 的版本) 注意：Mac 电脑安装全局包时，需要添加 sudo 获取权限：sudo npm i -g typescript</li></ul><h3 id="编译并运行-ts-代码" tabindex="-1">编译并运行 TS 代码 <a class="header-anchor" href="#编译并运行-ts-代码" aria-label="Permalink to &quot;编译并运行 TS 代码&quot;">​</a></h3><p>步骤</p><ol><li>创建js文件。例如 hello.ts 文件（注意：TS 文件的后缀名为 .ts）</li><li>编译。将 TS 编译为 JS<br> 在终端中输入命令，tsc hello.ts（此时，在同级目录中会出现一个同名的 JS 文件）</li><li>执行 JS 代码。 <ol><li>在node中运行。在终端中输入命令，node hello.js</li><li>在浏览器中运行。</li></ol></li></ol><h3 id="拓展-在线运行" tabindex="-1">拓展：在线运行 <a class="header-anchor" href="#拓展-在线运行" aria-label="Permalink to &quot;拓展：在线运行&quot;">​</a></h3><p><a href="https://www.typescriptlang.org/play" target="_blank" rel="noreferrer">https://www.typescriptlang.org/play</a></p><h2 id="ts-node-简化运行-ts-的步骤" tabindex="-1">ts-node 简化运行 TS 的步骤 <a class="header-anchor" href="#ts-node-简化运行-ts-的步骤" aria-label="Permalink to &quot;ts-node 简化运行 TS 的步骤&quot;">​</a></h2><h3 id="目标-1" tabindex="-1">目标 <a class="header-anchor" href="#目标-1" aria-label="Permalink to &quot;目标&quot;">​</a></h3><p>了解ts-node命令的基本使用；</p><h3 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h3><p>每次修改代码后，都要重复执行两个命令，才能运行 TS 代码，太繁琐。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">你的代码.ts</span></span>
<span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">你的代码.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="简化方式" tabindex="-1">简化方式 <a class="header-anchor" href="#简化方式" aria-label="Permalink to &quot;简化方式&quot;">​</a></h3><p>使用 <code>ts-node</code> 包，直接在 Node.js 中执行 TS 代码。它提供了 <code>ts-node</code> 命令，可以简化执行命令。</p><h3 id="安装命令" tabindex="-1">安装命令 <a class="header-anchor" href="#安装命令" aria-label="Permalink to &quot;安装命令&quot;">​</a></h3><p><code>npm i -g ts-node</code><br> 使用方式：<code>ts-node hello.ts</code> 相当于：1 tsc 命令 2 node（注意：ts-node 不会生成 js 文件）<br> 解释：ts-node 命令在内部偷偷的将 TS -&gt; JS，然后，再运行 JS 代码</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>在初始学习阶段，我们会使用ts-node来运行代码，在项目阶段就不会再这样使用了。</p><h3 id="ts-node报错问题" tabindex="-1">ts-node报错问题 <a class="header-anchor" href="#ts-node报错问题" aria-label="Permalink to &quot;ts-node报错问题&quot;">​</a></h3><h4 id="console-log报错问题" tabindex="-1">console.log报错问题 <a class="header-anchor" href="#console-log报错问题" aria-label="Permalink to &quot;console.log报错问题&quot;">​</a></h4><p><code>Cannot find name &#39;console&#39;. Do you need to change your target library? Try changing thelibcompiler option to include &#39;dom&#39;.</code></p><h4 id="解决" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-label="Permalink to &quot;解决&quot;">​</a></h4><ol><li><code>tsc --init</code> 生成配置文件 tsconfig.json</li><li>写代码时，用{}包起来</li></ol>`,45),o=[n];function r(i,p,c,d,h,u){return e(),s("div",null,o)}const S=a(t,[["render",r]]);export{b as __pageData,S as default};
